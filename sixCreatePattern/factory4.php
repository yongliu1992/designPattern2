<?php
/**
 * Created by PhpStorm.
 * User: kok
 * Date: 2017/7/29
 * Time: 19:33
 * 重载的工厂方法
 * Sunny公司开发人员通过进一步分析，
 * 发现可以通过多种方式来初始化日志记录器，
 * 例如可以为各种日志记录器提供默认实现；还可以为数据库日志记录器提供数据库连接字符串，
 * 为文件日志记录器提供文件路径；也可以将参数封装在一个Object类型的对象中，
 * 通过Object对象将配置参数传入工厂类。此时，可以提供一组重载的工厂方法，以不同的方式对产品对象进行创建。
 * 当然，对于同一个具体工厂而言，无论使用哪个工厂方法，创建的产品类型均要相同。
 */
//引入重载方法后，抽象工厂LoggerFactory的代码修改如下：

interface LoggerFactory2 {
public function createLogger();
public function createObjArgs(Logger $args);
}

class DatabaseLoggerFactory2 implements LoggerFactory2 {
public function  createLogger() {
    //使用默认方式连接数据库，代码省略
 $logger = new DatabaseLogger();
    //初始化数据库日志记录器，代码省略
return $logger;
}

    public function createObjArgs(Logger $args) {
    //使用参数args作为连接字符串来连接数据库，代码省略
    $logger = new DatabaseLogger($args);
            //初始化数据库日志记录器，代码省略
            return $logger;
    }

}

/*其他具体工厂类代码省略
       在抽象工厂中定义多个重载的工厂方法，在具体工厂中实现了这些工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同产品对象的需求。


 工厂方法的隐藏
       有时候，为了进一步简化客户端的使用，还可以对客户端隐藏工厂方法，此时，在工厂类中将直接调用产品类的业务方法，客户端无须调用工厂方法创建产品，直接通过工厂即可使用所创建的对象中的业务方法。
       如果对客户端隐藏工厂方法，
       v[java] view plain copy
改为抽象类*/
abstract class LoggerFactory3 {
    //在工厂类中直接调用日志记录器类的业务方法writeLog()
public function  writeLog() {
$logger = $this->createLogger();
    $logger->writeLog();
}

    public abstract function  createLogger();
}

class Client {
public static function create(String $args) {
//引入类
//$factory 从配置表里面读取 实例化
    $factory = new DatabaseLoggerFactory();
$factory->writeLog(); //直接使用工厂对象来调用产品对象的业务方法
}
}
    /*   通过将业务方法的调用移入工厂类，可以直接使用工厂对象来调用产品对象的业务方法，客户端无须直接使用工厂方法，在某些情况下我们也可以使用这种设计方案。

7 工厂方法模式总结
      工厂方法模式是简单工厂模式的延伸，它继承了简单工厂模式的优点，同时还弥补了简单工厂模式的不足。工厂方法模式是使用频率最高的设计模式之一，是很多开源框架和API类库的核心模式。

        1. 主要优点
       工厂方法模式的主要优点如下：
       (1) 在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。
       (2) 基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，就正是因为所有的具体工厂类都具有同一抽象父类。
       (3) 使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。

      2. 主要缺点
     工厂方法模式的主要缺点如下：
      (1) 在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。
      (2) 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。

       3. 适用场景
       在以下情况下可以考虑使用工厂方法模式：
       (1) 客户端不知道它所需要的对象的类。在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中。
       (2) 抽象工厂类通过其子类来指定创建哪个对象。在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。
    */